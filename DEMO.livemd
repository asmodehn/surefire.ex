# Surefire

## Introduction

Surefire is a package helping make immediate rational decisions, to obtain a probabilistically suitable long term outcome, even in the presence of a process that is random in the short term.

This is the long way around saying surefire aims to make betting an activity as safe as possible.

To achieve this, we need to introduce concepts, that are handled implicitely or explicitely, usually by people, in a real-world game.

Here we aim to automate what is automatable.

But lets start by drawing an interaction model of what we are talking about:

```mermaid
flowchart LR

    User -->|bias !| Dec{Decision}
    Dec --> |enter| Position -->|exit| Trades

    Trades --> |statistics| User
    Dec --> |pass| Opportunity

    RandomWalk --> Opportunity -->|odds| User
    RandomWalk --> Position
```

<!-- livebook:{"break_markdown":true} -->

Let's draw a sequence diagram, to see the information transfer over time.

Note:

* Events regarding cards or bets are supposed to be tracked in the background, so any process can refer to it at a later time.
* Also we describe here the main data flow, but Player can always get additional information from Table to make a decision.

<!-- Learn more at https://mermaid-js.github.io/mermaid -->

```mermaid
sequenceDiagram 
  Player->>Bank: blind
  Bank ->> Table: ask_cards
  Table ->> Stochastic: start_game
  Stochastic ->> Table: deal_cards 
  Table ->> Bank: opportunities 
  Bank ->> Player: opportunities

  Player->>Bank: bets
  Bank ->> Table: next
  Table ->> Stochastic: next
  Stochastic ->> Table: next_card
  Table->>Bank: opportunities 
  Bank ->> Player: opportunities
  
  Player->>Bank: bets
  Bank->> Table: reveal
  Table ->> Stochastic: reveal
  Stochastic ->> Table: revealed
  Table->>Bank: do_payout
  Bank->>Player: payout
```

So here we see the main actors in this game.
What we want here is th at the Bank, and the Table have functionality to help the Player make a decision.

So Bank has a part of its logic that depends on the Game, and a part that is needed to help the player make good/safe decisions (money mngmt, odds & expectations).

And Table also has a part of its logic that depends on the Game, and a part that is needed to help the player make good/safe decisions (future probabilities & past statistics)

<!-- livebook:{"break_markdown":true} -->



```elixir
# Usage example

# In a DayTrader GenServer, started with (minimal_acceptable_odds)


stats = Trades.statistics()

while Statistics.verify(stats > 

# synchronously get the next opportunity, 
# for which the odds are more than some minimal acceptable value
opportunity = RandomWalk.opportunity(minimal_acceptable_odds)

assert opportunity.estimated_odds >= minimal_acceptable_odds 

# If desired we can bet on this opportunity
# Otherwise, we can just skip it...
position = Opportunity.bet(opportunity)


# We synchronously wait for when the position will close (one way or another)
# Note :  the trade should be automatically recorded...
trade = Position.wait_for_exit(position)


stats = Trades.statistics()








```
